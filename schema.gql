type Borrow {
  cost: Float!
  id: Int!
  loanPeriod: TimeSlot!
  status: BorrowStatus!
  timeReturned: Date
  tool: Tool!
  user: User!
}

enum BorrowStatus {
  accepted
  rejected
  pending
}

# Returns the number of seconds since January, 1st, 2001: 12:00 am, ie Date(timeIntervalSinceReferenceDate: )
scalar Date

type GeoLocation {
  lat: Float!
  lon: Float!
}

input GeoLocationInput {
  lat: Float!
  lon: Float!
}

type Mutation {
  # Adds a new tool with the given properties, and returns the created Tool object
  addTool(tool: NewToolInput!): Tool!
  approveBorrow(id: Int!): Boolean!
  createToolRating(review: String, rating: Int!, reviewerId: Int!, revieweeId: Int!): ToolRating!
  createUserRating(rating: Int!, revieweeId: Int!, review: String, reviewerId: Int!): UserRating!
  deleteTool(toolId: Int!): Boolean!
  deleteToolRating(revieweeId: Int!, reviewerId: Int!): Boolean!
  deleteUserRating(reviewerId: Int!, revieweeId: Int!): Boolean!
  denyBorrow(id: Int!): Boolean!
  requestBorrow(userId: Int!, startTime: Date!, endTime: Date!, toolId: Int!): Int!
}

input NewToolInput {
  condition: ToolCondition!
  description: String!
  hourlyCost: Float!

  # URL of uploaded image. Must have at least 1
  images: [String!]!
  location: GeoLocationInput!
  name: String!
  ownerId: Int!

  # Tags (ie handtool, powertool, etc). Must have at least 1
  tags: [String!]!
}

type Query {
  # Get a given borrow by id
  borrow(id: Int!): Borrow

  # Find all tools within a given radius, centered at a point
  nearby(center: GeoLocationInput!, radius: Float!): [Tool!]!
  self: User

  # Get a tool by id
  tool(id: Int!): Tool
}

type TimeSlot {
  end: Date!
  start: Date!
}

type Tool {
  averageRating: Float!

  # The history of this tool being loaned out
  borrowHistory: [Borrow!]!
  condition: ToolCondition!
  description: String!
  hourly_cost: Float!
  id: Int!
  images: [String!]!
  location: GeoLocation!
  name: String!
  owner: User!
  ratings: [ToolRating!]!
  schedule: [TimeSlot!]!
  tags: [String!]!
}

enum ToolCondition {
  poor
  fair
  new
  good
  great
}

type ToolRating {
  rating: Int!
  review: String
  tool: Tool!
  user: User!
}

type User {
  borrowHistory: [Borrow!]!
  email: String!
  id: Int!
  name: String!
  ownedTools: [Tool!]!
  phoneNumber: String!
  ratings: [UserRating!]!
}

type UserRating {
  rating: Int!
  review: String
  reviewee: User!
  reviewer: User!
}

