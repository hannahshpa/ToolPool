type Borrow {
  cost: Float!
  id: Int!
  loanPeriod: TimeSlot!
  timeReturned: Date
  tool: Tool!
  user: User!
}

# Returns the number of seconds since January, 1st, 2001: 12:00 am, ie Date(timeIntervalSinceReferenceDate: )
scalar Date

type GeoLocation {
  lat: Float!
  lon: Float!
}

input GeoLocationInput {
  lat: Float!
  lon: Float!
}

type Mutation {
  addTool(tool: NewToolInput!): Boolean!
  updateTool: Boolean!
}

input NewToolInput {
  description: String!
  name: String!
}

type Query {
  nearby(center: GeoLocationInput!, radius: Float!): [Tool!]!
  self: User
  tool(id: Int!): Tool
}

type TimeSlot {
  end: Date!
  start: Date!
}

type Tool {
  # The history of this tool being loaned out
  borrowHistory: [Borrow!]!
  condition: ToolCondition!
  description: String!
  id: Int!
  images: [String!]!
  location: GeoLocation!
  name: String!
  owner: User!
  ratings: [ToolRating!]!
  schedule: [TimeSlot!]!
  tags: [String!]!
}

enum ToolCondition {
  new
  fair
  good
  poor
  great
}

type ToolRating {
  rating: Int!
  review: String
  tool: Tool!
  user: User!
}

type User {
  borrowHistory: [Borrow!]!
  email: String!
  id: Int!
  name: String!
  ownedTools: [Tool!]!
  phoneNumber: String!
  ratings: [UserRating!]!
}

type UserRating {
  rating: Int!
  review: String
  reviewee: User!
  reviewer: User!
}

